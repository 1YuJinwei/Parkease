import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.stream.Collectors;

public class CSVManager {
    private String filePath;

    public CSVManager(String filePath) {
        this.filePath = filePath;
    }


    /**
     * 从CSV文件加载用户数据。
     * @return 包含用户名作为键，角色和密码作为值的映射。
     */
    public Map<String, String[]> loadUserData() {
        Map<String, String[]> userData = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] userDetails = line.split(",");
                if (userDetails.length == 4) {
                    // userDetails[0] = 角色, userDetails[1] = 用户名, userDetails[2] = 密码
                    userData.put(userDetails[1], new String[]{userDetails[0], userDetails[2], userDetails[3]});
                    userData.put(userDetails[1], new String[]{userDetails[0], userDetails[2], userDetails[3]});

                    System.out.println(userDetails[1] + " " + userDetails[0] + " " + userDetails[2] + " " + userDetails[3]);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("用户数量：" + userData.size());
        return userData;
    }

    /**
     * 验证用户登录。
     * @param username 用户名
     * @param password 密码
     * @param role 角色
     * @return 如果用户名、密码和角色匹配，则返回 true。
     */
    public boolean validateLogin(String username, String password, String role) {
        Map<String, String[]> userData = loadUserData();
        if (userData.containsKey(username)) {
            String[] details = userData.get(username);
            System.out.println(username+  "====" + details[0] + " " + details[1] + "====");
            // details[0] = 角色, details[1] = 密码
            return details[0].equals(role) && details[1].equals(password) && details[2].equals("正常");
        }
        return false;
    }

    public List<User> loadUsers() throws IOException {
        List<User> users = new ArrayList<>();
        List<String> lines = Files.readAllLines(Paths.get("users.csv"));

        for (String line : lines) {
            String[] data = line.split(",");
            if (data.length >= 4) {
                String role = data[0];
                String username = data[1];
                String password = data[2];
                String status = data[3];
                users.add(new User(role, username, password, status));
            }
        }
        System.out.println("用户数量：" + users.size());
        return users;
    }

    public User getUser(String username) {
        List<User> users = null; // Assuming this method loads all users

        try {
            users = loadUsers();
        } catch (IOException e) {
            e.printStackTrace();
        }
        for (User user : users) {
            if (user.getUsername().equals(username)) {
                return user;
            }
        }
        return null;
    }
}
