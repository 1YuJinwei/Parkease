import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class AdminMainPanel extends Application {
    private BorderPane root;
    private List<ParkingRecord> parkingRecords = new ArrayList<>();
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("管理员界面 - 停车管理系统");
        root = new BorderPane();

        // 创建菜单和其他UI组件
        setupUI(primaryStage);
        showParkingStatus();
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    private void setupUI(Stage primaryStage) {
        // 菜单项
        MenuBar menuBar = new MenuBar();
        Menu viewMenu = new Menu("视图");
        MenuItem viewParkingStatus = new MenuItem("查看车位情况");
        MenuItem viewAllRecords = new MenuItem("查看所有停车记录");
        viewMenu.getItems().addAll(viewParkingStatus, viewAllRecords);

        Menu adminMenu = new Menu("管理");
        MenuItem manageUsers = new MenuItem("管理用户信息");
        MenuItem manageRates = new MenuItem("修改计费单价");
        adminMenu.getItems().addAll(manageUsers, manageRates);

        Menu accountMenu = new Menu("账户");
//        MenuItem myInfo = new MenuItem("个人信息");
        MenuItem logoutMenuItem = new MenuItem("登出");
        logoutMenuItem.setOnAction(event -> logoutAction());

//        accountMenu.getItems().addAll(myInfo,logoutMenuItem);
        accountMenu.getItems().addAll(logoutMenuItem);
        menuBar.getMenus().addAll(viewMenu, adminMenu,accountMenu);
        root.setTop(menuBar);

        // 菜单项事件处理
        viewParkingStatus.setOnAction(e -> showParkingStatus());
        viewAllRecords.setOnAction(e -> showAllParkingRecords());
        manageUsers.setOnAction(e -> manageUserInformation());
        manageRates.setOnAction(e -> changeParkingRates());

    }

    private void logoutAction() {
        // 关闭当前界面
        Stage stage = (Stage) root.getScene().getWindow();
        stage.close();

        // 打开登录界面
        Platform.runLater(() -> {
            try {
                new LoginFrame().start(new Stage()); // 假设LoginFrame是您的登录界面类
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    /* 显示所有停车记录 */
    public void showAllParkingRecords() {
        System.out.println("显示停车记录");
        // completed_parkings.csv
        CSVManager csvManager = new CSVManager("completed_parkings.csv");
        List<ParkingRecord> records = csvManager.loadParkingRecords("");
        System.out.println(records.size());
        TableView<ParkingRecord> table = new TableView<>();
        ObservableList<ParkingRecord> data = FXCollections.observableArrayList(records);

        // 定义列
        TableColumn<ParkingRecord, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<ParkingRecord, String> startCol = new TableColumn<>("开始时间");
        startCol.setCellValueFactory(new PropertyValueFactory<>("startTime"));

        TableColumn<ParkingRecord, String> endCol = new TableColumn<>("结束时间");
        endCol.setCellValueFactory(new PropertyValueFactory<>("endTime"));

        TableColumn<ParkingRecord, Long> durationCol = new TableColumn<>("停车时长(分钟)");
        durationCol.setCellValueFactory(new PropertyValueFactory<>("durationInMinutes"));

        TableColumn<ParkingRecord, Double> feeCol = new TableColumn<>("停车费用");
        feeCol.setCellValueFactory(new PropertyValueFactory<>("fee"));
//        feeCol.prefWidthProperty().bind(table.widthProperty().multiply(0.2));

        table.getColumns().addAll(usernameCol, startCol, endCol, durationCol, feeCol);
        table.setItems(data);

        // 显示表格
        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox,800,400);
        Stage stage = new Stage();
        stage.setScene(scene);
        stage.setTitle("停车记录");
        stage.show();

    }

    private void manageUserInformation() {
        CSVManager csvManager = new CSVManager("users.csv");
        List<User> users = null;
        try {
            users = csvManager.loadUsers();
        } catch (IOException e) {
            e.printStackTrace();
        }

        TableView<User> table = new TableView<>();
        ObservableList<User> data = FXCollections.observableArrayList(users);

        // 定义列
        TableColumn<User, String> roleCol = new TableColumn<>("角色");
        roleCol.setCellValueFactory(new PropertyValueFactory<>("role"));

        TableColumn<User, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<User, String> passwordCol = new TableColumn<>("密码");
        passwordCol.setCellValueFactory(new PropertyValueFactory<>("password"));

        TableColumn<User, String> statusCol = new TableColumn<>("账号状态");
        statusCol.setCellValueFactory(new PropertyValueFactory<>("status"));

        table.getColumns().addAll(roleCol, usernameCol, passwordCol, statusCol);
        table.setItems(data);
        TableColumn<User, Void> actionCol = new TableColumn<>("操作");

        actionCol.setCellFactory(col -> new TableCell<User, Void>() {
            private final Button activateButton = new Button("激活/禁用");
            private final Button editButton = new Button("修改");
            private final Button deleteButton = new Button("删除");

            {
                // 激活或停用账号
                activateButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    toggleUserStatus(user);
                });

                // 修改用户信息
                editButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    editUserInfo(user);
                });

                // 删除账号
                deleteButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    deleteUser(user);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(activateButton, editButton, deleteButton);
                    hbox.setSpacing(10);
                    setGraphic(hbox);
                }
            }
        });
        table.getColumns().add(actionCol);

        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox, 800, 600);
        Stage stage = new Stage();
        stage.setTitle("管理用户信息");
        stage.setScene(scene);
        stage.show();

    }

    private void toggleUserStatus(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否激活/停用 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.toggleUserStatus(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 状态修改成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户状态修改失败: " + e.getMessage());
                }
            }
        });
    }

    private void editUserInfo(User user) {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改用户信息");
        dialog.setHeaderText("修改用户 " + user.getUsername() + " 的信息");
        dialog.setContentText("请输入新密码:");

        // 获取用户输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newPassword -> {
            try {
                CSVManager csvManager = new CSVManager("users.csv");
                csvManager.updateUser(user.getUsername(), newPassword);
                showAlert("成功", "User " + user.getUsername() + " 信息修改成功.");
                manageUserInformation();
            } catch (IOException e) {
                showAlert("错误", "用户信息修改失败: " + e.getMessage());
            }
        });
    }

    private void deleteUser(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否删除 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.deleteUser(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 删除成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户删除失败: " + e.getMessage());
                }
            }
        });
    }

    /* 修改计费单价 */
    private void changeParkingRates() {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改停车费率");
        dialog.setHeaderText("修改停车费率");
        dialog.setContentText("请输入新的停车费率（每分钟）:");

        // 处理用户的输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newRate -> {
            try {
                double rate = Double.parseDouble(newRate);
                FeeManager feeManager = new FeeManager("fee_info.txt"); // 指定费率文件的路径
                feeManager.saveFeePerMinute(rate); // 更新费率
                showAlert("更新成功", "停车费率已更新为 " + rate + " 元/分钟。");
            } catch (NumberFormatException e) {
                showAlert("错误", "请输入有效的数字。");
            }
        });
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }


    public static void main(String[] args) {
        launch(args);
    }

    private GridPane createParkingGrid() {
        //        active_parkings.csv
        CSVManager activeParkingManager = new CSVManager("active_parkings.csv");
        parkingRecords = activeParkingManager.loadActiveParkingRecords("");  // Load records; ensure this returns all relevant records
        GridPane parkingGrid = new GridPane();
        parkingGrid.setPadding(new Insets(10));
        parkingGrid.setHgap(10);
        parkingGrid.setVgap(10);
        System.out.println("Loaded records:");
        for(ParkingRecord record : parkingRecords) {
            System.out.println(record);
        }
        for (int row = 0; row < 10; row++) {
            for (int col = 0; col < 5; col++) {
                int spotIndex = row * 5 + col;
                Button parkingSpot = new Button("空闲");
                parkingSpot.setPrefSize(100, 50);

                // Set parking spot state based on loaded records
                int finalCol = col;
                int finalRow = row;
                parkingRecords.stream()
                        .filter(record -> record.getXPosition() == finalCol && record.getYPosition() == finalRow)
                        .findFirst()
                        .ifPresent(record -> {
                            parkingSpot.setText("占用");
                            parkingSpot.setStyle("-fx-background-color: red; -fx-text-fill: white;");
                            parkingSpot.setDisable(true);  // Optional: Disable button if spot is occupied
                        });

                parkingGrid.add(parkingSpot, col, row);
            }
        }
        return parkingGrid;
    }

    private void showParkingStatus() {
        GridPane parkingGrid = createParkingGrid(); // 创建停车场网格布局
        root.setCenter(parkingGrid); // 将停车场视图设置为界面的中心内容
    }


    private List<ParkingSpot> getParkingStatus() {
        String filePath = "active_parkings.csv";  // Path to the CSV file with active parking data
        List<ParkingSpot> spots = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                try {
                    String[] parts = line.split(",");
                    if (parts.length >= 7) {  // Ensure there are enough parts
                        int xPosition = Integer.parseInt(parts[5]);  // Parse X position
                        int yPosition = Integer.parseInt(parts[6]);  // Parse Y position
                        if (xPosition < 10 && yPosition < 5) {  // Validate positions against grid size
                            boolean occupied = true;  // Since the record exists, the spot is occupied
                            spots.add(new ParkingSpot(xPosition, yPosition, occupied));

                        }
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Invalid record format: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return spots;
    }



    class ParkingSpot {
        private int x;
        private int y;
        private boolean occupied;

        public ParkingSpot(int x, int y, boolean occupied) {
            this.x = x;
            this.y = y;
            this.occupied = occupied;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isOccupied() {
            return occupied;
        }
    }

}
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class AdminMainPanel extends Application {
    private BorderPane root;
    private List<ParkingRecord> parkingRecords = new ArrayList<>();
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("管理员界面 - 停车管理系统");
        root = new BorderPane();

        // 创建菜单和其他UI组件
        setupUI(primaryStage);
        showParkingStatus();
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    private void setupUI(Stage primaryStage) {
        // 菜单项
        MenuBar menuBar = new MenuBar();
        Menu viewMenu = new Menu("视图");
        MenuItem viewParkingStatus = new MenuItem("查看车位情况");
        MenuItem viewAllRecords = new MenuItem("查看所有停车记录");
        viewMenu.getItems().addAll(viewParkingStatus, viewAllRecords);

        Menu adminMenu = new Menu("管理");
        MenuItem manageUsers = new MenuItem("管理用户信息");
        MenuItem manageRates = new MenuItem("修改计费单价");
        adminMenu.getItems().addAll(manageUsers, manageRates);

        Menu accountMenu = new Menu("账户");
//        MenuItem myInfo = new MenuItem("个人信息");
        MenuItem logoutMenuItem = new MenuItem("登出");
        logoutMenuItem.setOnAction(event -> logoutAction());

//        accountMenu.getItems().addAll(myInfo,logoutMenuItem);
        accountMenu.getItems().addAll(logoutMenuItem);
        menuBar.getMenus().addAll(viewMenu, adminMenu,accountMenu);
        root.setTop(menuBar);

        // 菜单项事件处理
        viewParkingStatus.setOnAction(e -> showParkingStatus());
        viewAllRecords.setOnAction(e -> showAllParkingRecords());
        manageUsers.setOnAction(e -> manageUserInformation());
        manageRates.setOnAction(e -> changeParkingRates());

    }

    private void logoutAction() {
        // 关闭当前界面
        Stage stage = (Stage) root.getScene().getWindow();
        stage.close();

        // 打开登录界面
        Platform.runLater(() -> {
            try {
                new LoginFrame().start(new Stage()); // 假设LoginFrame是您的登录界面类
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    /* 显示所有停车记录 */
    public void showAllParkingRecords() {
        System.out.println("显示停车记录");
        // completed_parkings.csv
        CSVManager csvManager = new CSVManager("completed_parkings.csv");
        List<ParkingRecord> records = csvManager.loadParkingRecords("");
        System.out.println(records.size());
        TableView<ParkingRecord> table = new TableView<>();
        ObservableList<ParkingRecord> data = FXCollections.observableArrayList(records);

        // 定义列
        TableColumn<ParkingRecord, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<ParkingRecord, String> startCol = new TableColumn<>("开始时间");
        startCol.setCellValueFactory(new PropertyValueFactory<>("startTime"));

        TableColumn<ParkingRecord, String> endCol = new TableColumn<>("结束时间");
        endCol.setCellValueFactory(new PropertyValueFactory<>("endTime"));

        TableColumn<ParkingRecord, Long> durationCol = new TableColumn<>("停车时长(分钟)");
        durationCol.setCellValueFactory(new PropertyValueFactory<>("durationInMinutes"));

        TableColumn<ParkingRecord, Double> feeCol = new TableColumn<>("停车费用");
        feeCol.setCellValueFactory(new PropertyValueFactory<>("fee"));
//        feeCol.prefWidthProperty().bind(table.widthProperty().multiply(0.2));

        table.getColumns().addAll(usernameCol, startCol, endCol, durationCol, feeCol);
        table.setItems(data);

        // 显示表格
        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox,800,400);
        Stage stage = new Stage();
        stage.setScene(scene);
        stage.setTitle("停车记录");
        stage.show();

    }

    private void manageUserInformation() {
        CSVManager csvManager = new CSVManager("users.csv");
        List<User> users = null;
        try {
            users = csvManager.loadUsers();
        } catch (IOException e) {
            e.printStackTrace();
        }

        TableView<User> table = new TableView<>();
        ObservableList<User> data = FXCollections.observableArrayList(users);

        // 定义列
        TableColumn<User, String> roleCol = new TableColumn<>("角色");
        roleCol.setCellValueFactory(new PropertyValueFactory<>("role"));

        TableColumn<User, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<User, String> passwordCol = new TableColumn<>("密码");
        passwordCol.setCellValueFactory(new PropertyValueFactory<>("password"));

        TableColumn<User, String> statusCol = new TableColumn<>("账号状态");
        statusCol.setCellValueFactory(new PropertyValueFactory<>("status"));

        table.getColumns().addAll(roleCol, usernameCol, passwordCol, statusCol);
        table.setItems(data);
        TableColumn<User, Void> actionCol = new TableColumn<>("操作");

        actionCol.setCellFactory(col -> new TableCell<User, Void>() {
            private final Button activateButton = new Button("激活/禁用");
            private final Button editButton = new Button("修改");
            private final Button deleteButton = new Button("删除");

            {
                // 激活或停用账号
                activateButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    toggleUserStatus(user);
                });

                // 修改用户信息
                editButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    editUserInfo(user);
                });

                // 删除账号
                deleteButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    deleteUser(user);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(activateButton, editButton, deleteButton);
                    hbox.setSpacing(10);
                    setGraphic(hbox);
                }
            }
        });
        table.getColumns().add(actionCol);

        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox, 800, 600);
        Stage stage = new Stage();
        stage.setTitle("管理用户信息");
        stage.setScene(scene);
        stage.show();

    }

    private void toggleUserStatus(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否激活/停用 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.toggleUserStatus(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 状态修改成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户状态修改失败: " + e.getMessage());
                }
            }
        });
    }

    private void editUserInfo(User user) {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改用户信息");
        dialog.setHeaderText("修改用户 " + user.getUsername() + " 的信息");
        dialog.setContentText("请输入新密码:");

        // 获取用户输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newPassword -> {
            try {
                CSVManager csvManager = new CSVManager("users.csv");
                csvManager.updateUser(user.getUsername(), newPassword);
                showAlert("成功", "User " + user.getUsername() + " 信息修改成功.");
                manageUserInformation();
            } catch (IOException e) {
                showAlert("错误", "用户信息修改失败: " + e.getMessage());
            }
        });
    }

    private void deleteUser(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否删除 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.deleteUser(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 删除成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户删除失败: " + e.getMessage());
                }
            }
        });
    }

    /* 修改计费单价 */
    private void changeParkingRates() {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改停车费率");
        dialog.setHeaderText("修改停车费率");
        dialog.setContentText("请输入新的停车费率（每分钟）:");

        // 处理用户的输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newRate -> {
            try {
                double rate = Double.parseDouble(newRate);
                FeeManager feeManager = new FeeManager("fee_info.txt"); // 指定费率文件的路径
                feeManager.saveFeePerMinute(rate); // 更新费率
                showAlert("更新成功", "停车费率已更新为 " + rate + " 元/分钟。");
            } catch (NumberFormatException e) {
                showAlert("错误", "请输入有效的数字。");
            }
        });
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }


    public static void main(String[] args) {
        launch(args);
    }

    private GridPane createParkingGrid() {
        //        active_parkings.csv
        CSVManager activeParkingManager = new CSVManager("active_parkings.csv");
        parkingRecords = activeParkingManager.loadActiveParkingRecords("");  // Load records; ensure this returns all relevant records
        GridPane parkingGrid = new GridPane();
        parkingGrid.setPadding(new Insets(10));
        parkingGrid.setHgap(10);
        parkingGrid.setVgap(10);
        System.out.println("Loaded records:");
        for(ParkingRecord record : parkingRecords) {
            System.out.println(record);
        }
        for (int row = 0; row < 10; row++) {
            for (int col = 0; col < 5; col++) {
                int spotIndex = row * 5 + col;
                Button parkingSpot = new Button("空闲");
                parkingSpot.setPrefSize(100, 50);

                // Set parking spot state based on loaded records
                int finalCol = col;
                int finalRow = row;
                parkingRecords.stream()
                        .filter(record -> record.getXPosition() == finalCol && record.getYPosition() == finalRow)
                        .findFirst()
                        .ifPresent(record -> {
                            parkingSpot.setText("占用");
                            parkingSpot.setStyle("-fx-background-color: red; -fx-text-fill: white;");
                            parkingSpot.setDisable(true);  // Optional: Disable button if spot is occupied
                        });

                parkingGrid.add(parkingSpot, col, row);
            }
        }
        return parkingGrid;
    }

    private void showParkingStatus() {
        GridPane parkingGrid = createParkingGrid(); // 创建停车场网格布局
        root.setCenter(parkingGrid); // 将停车场视图设置为界面的中心内容
    }


    private List<ParkingSpot> getParkingStatus() {
        String filePath = "active_parkings.csv";  // Path to the CSV file with active parking data
        List<ParkingSpot> spots = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                try {
                    String[] parts = line.split(",");
                    if (parts.length >= 7) {  // Ensure there are enough parts
                        int xPosition = Integer.parseInt(parts[5]);  // Parse X position
                        int yPosition = Integer.parseInt(parts[6]);  // Parse Y position
                        if (xPosition < 10 && yPosition < 5) {  // Validate positions against grid size
                            boolean occupied = true;  // Since the record exists, the spot is occupied
                            spots.add(new ParkingSpot(xPosition, yPosition, occupied));

                        }
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Invalid record format: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return spots;
    }



    class ParkingSpot {
        private int x;
        private int y;
        private boolean occupied;

        public ParkingSpot(int x, int y, boolean occupied) {
            this.x = x;
            this.y = y;
            this.occupied = occupied;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isOccupied() {
            return occupied;
        }
    }

}
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class AdminMainPanel extends Application {
    private BorderPane root;
    private List<ParkingRecord> parkingRecords = new ArrayList<>();
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("管理员界面 - 停车管理系统");
        root = new BorderPane();

        // 创建菜单和其他UI组件
        setupUI(primaryStage);
        showParkingStatus();
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    private void setupUI(Stage primaryStage) {
        // 菜单项
        MenuBar menuBar = new MenuBar();
        Menu viewMenu = new Menu("视图");
        MenuItem viewParkingStatus = new MenuItem("查看车位情况");
        MenuItem viewAllRecords = new MenuItem("查看所有停车记录");
        viewMenu.getItems().addAll(viewParkingStatus, viewAllRecords);

        Menu adminMenu = new Menu("管理");
        MenuItem manageUsers = new MenuItem("管理用户信息");
        MenuItem manageRates = new MenuItem("修改计费单价");
        adminMenu.getItems().addAll(manageUsers, manageRates);

        Menu accountMenu = new Menu("账户");
//        MenuItem myInfo = new MenuItem("个人信息");
        MenuItem logoutMenuItem = new MenuItem("登出");
        logoutMenuItem.setOnAction(event -> logoutAction());

//        accountMenu.getItems().addAll(myInfo,logoutMenuItem);
        accountMenu.getItems().addAll(logoutMenuItem);
        menuBar.getMenus().addAll(viewMenu, adminMenu,accountMenu);
        root.setTop(menuBar);

        // 菜单项事件处理
        viewParkingStatus.setOnAction(e -> showParkingStatus());
        viewAllRecords.setOnAction(e -> showAllParkingRecords());
        manageUsers.setOnAction(e -> manageUserInformation());
        manageRates.setOnAction(e -> changeParkingRates());

    }

    private void logoutAction() {
        // 关闭当前界面
        Stage stage = (Stage) root.getScene().getWindow();
        stage.close();

        // 打开登录界面
        Platform.runLater(() -> {
            try {
                new LoginFrame().start(new Stage()); // 假设LoginFrame是您的登录界面类
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    /* 显示所有停车记录 */
    public void showAllParkingRecords() {
        System.out.println("显示停车记录");
        // completed_parkings.csv
        CSVManager csvManager = new CSVManager("completed_parkings.csv");
        List<ParkingRecord> records = csvManager.loadParkingRecords("");
        System.out.println(records.size());
        TableView<ParkingRecord> table = new TableView<>();
        ObservableList<ParkingRecord> data = FXCollections.observableArrayList(records);

        // 定义列
        TableColumn<ParkingRecord, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<ParkingRecord, String> startCol = new TableColumn<>("开始时间");
        startCol.setCellValueFactory(new PropertyValueFactory<>("startTime"));

        TableColumn<ParkingRecord, String> endCol = new TableColumn<>("结束时间");
        endCol.setCellValueFactory(new PropertyValueFactory<>("endTime"));

        TableColumn<ParkingRecord, Long> durationCol = new TableColumn<>("停车时长(分钟)");
        durationCol.setCellValueFactory(new PropertyValueFactory<>("durationInMinutes"));

        TableColumn<ParkingRecord, Double> feeCol = new TableColumn<>("停车费用");
        feeCol.setCellValueFactory(new PropertyValueFactory<>("fee"));
//        feeCol.prefWidthProperty().bind(table.widthProperty().multiply(0.2));

        table.getColumns().addAll(usernameCol, startCol, endCol, durationCol, feeCol);
        table.setItems(data);

        // 显示表格
        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox,800,400);
        Stage stage = new Stage();
        stage.setScene(scene);
        stage.setTitle("停车记录");
        stage.show();

    }

    private void manageUserInformation() {
        CSVManager csvManager = new CSVManager("users.csv");
        List<User> users = null;
        try {
            users = csvManager.loadUsers();
        } catch (IOException e) {
            e.printStackTrace();
        }

        TableView<User> table = new TableView<>();
        ObservableList<User> data = FXCollections.observableArrayList(users);

        // 定义列
        TableColumn<User, String> roleCol = new TableColumn<>("角色");
        roleCol.setCellValueFactory(new PropertyValueFactory<>("role"));

        TableColumn<User, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<User, String> passwordCol = new TableColumn<>("密码");
        passwordCol.setCellValueFactory(new PropertyValueFactory<>("password"));

        TableColumn<User, String> statusCol = new TableColumn<>("账号状态");
        statusCol.setCellValueFactory(new PropertyValueFactory<>("status"));

        table.getColumns().addAll(roleCol, usernameCol, passwordCol, statusCol);
        table.setItems(data);
        TableColumn<User, Void> actionCol = new TableColumn<>("操作");

        actionCol.setCellFactory(col -> new TableCell<User, Void>() {
            private final Button activateButton = new Button("激活/禁用");
            private final Button editButton = new Button("修改");
            private final Button deleteButton = new Button("删除");

            {
                // 激活或停用账号
                activateButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    toggleUserStatus(user);
                });

                // 修改用户信息
                editButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    editUserInfo(user);
                });

                // 删除账号
                deleteButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    deleteUser(user);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(activateButton, editButton, deleteButton);
                    hbox.setSpacing(10);
                    setGraphic(hbox);
                }
            }
        });
        table.getColumns().add(actionCol);

        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox, 800, 600);
        Stage stage = new Stage();
        stage.setTitle("管理用户信息");
        stage.setScene(scene);
        stage.show();

    }

    private void toggleUserStatus(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否激活/停用 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.toggleUserStatus(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 状态修改成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户状态修改失败: " + e.getMessage());
                }
            }
        });
    }

    private void editUserInfo(User user) {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改用户信息");
        dialog.setHeaderText("修改用户 " + user.getUsername() + " 的信息");
        dialog.setContentText("请输入新密码:");

        // 获取用户输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newPassword -> {
            try {
                CSVManager csvManager = new CSVManager("users.csv");
                csvManager.updateUser(user.getUsername(), newPassword);
                showAlert("成功", "User " + user.getUsername() + " 信息修改成功.");
                manageUserInformation();
            } catch (IOException e) {
                showAlert("错误", "用户信息修改失败: " + e.getMessage());
            }
        });
    }

    private void deleteUser(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否删除 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.deleteUser(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 删除成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户删除失败: " + e.getMessage());
                }
            }
        });
    }

    /* 修改计费单价 */
    private void changeParkingRates() {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改停车费率");
        dialog.setHeaderText("修改停车费率");
        dialog.setContentText("请输入新的停车费率（每分钟）:");

        // 处理用户的输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newRate -> {
            try {
                double rate = Double.parseDouble(newRate);
                FeeManager feeManager = new FeeManager("fee_info.txt"); // 指定费率文件的路径
                feeManager.saveFeePerMinute(rate); // 更新费率
                showAlert("更新成功", "停车费率已更新为 " + rate + " 元/分钟。");
            } catch (NumberFormatException e) {
                showAlert("错误", "请输入有效的数字。");
            }
        });
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }


    public static void main(String[] args) {
        launch(args);
    }

    private GridPane createParkingGrid() {
        //        active_parkings.csv
        CSVManager activeParkingManager = new CSVManager("active_parkings.csv");
        parkingRecords = activeParkingManager.loadActiveParkingRecords("");  // Load records; ensure this returns all relevant records
        GridPane parkingGrid = new GridPane();
        parkingGrid.setPadding(new Insets(10));
        parkingGrid.setHgap(10);
        parkingGrid.setVgap(10);
        System.out.println("Loaded records:");
        for(ParkingRecord record : parkingRecords) {
            System.out.println(record);
        }
        for (int row = 0; row < 10; row++) {
            for (int col = 0; col < 5; col++) {
                int spotIndex = row * 5 + col;
                Button parkingSpot = new Button("空闲");
                parkingSpot.setPrefSize(100, 50);

                // Set parking spot state based on loaded records
                int finalCol = col;
                int finalRow = row;
                parkingRecords.stream()
                        .filter(record -> record.getXPosition() == finalCol && record.getYPosition() == finalRow)
                        .findFirst()
                        .ifPresent(record -> {
                            parkingSpot.setText("占用");
                            parkingSpot.setStyle("-fx-background-color: red; -fx-text-fill: white;");
                            parkingSpot.setDisable(true);  // Optional: Disable button if spot is occupied
                        });

                parkingGrid.add(parkingSpot, col, row);
            }
        }
        return parkingGrid;
    }

    private void showParkingStatus() {
        GridPane parkingGrid = createParkingGrid(); // 创建停车场网格布局
        root.setCenter(parkingGrid); // 将停车场视图设置为界面的中心内容
    }


    private List<ParkingSpot> getParkingStatus() {
        String filePath = "active_parkings.csv";  // Path to the CSV file with active parking data
        List<ParkingSpot> spots = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                try {
                    String[] parts = line.split(",");
                    if (parts.length >= 7) {  // Ensure there are enough parts
                        int xPosition = Integer.parseInt(parts[5]);  // Parse X position
                        int yPosition = Integer.parseInt(parts[6]);  // Parse Y position
                        if (xPosition < 10 && yPosition < 5) {  // Validate positions against grid size
                            boolean occupied = true;  // Since the record exists, the spot is occupied
                            spots.add(new ParkingSpot(xPosition, yPosition, occupied));

                        }
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Invalid record format: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return spots;
    }



    class ParkingSpot {
        private int x;
        private int y;
        private boolean occupied;

        public ParkingSpot(int x, int y, boolean occupied) {
            this.x = x;
            this.y = y;
            this.occupied = occupied;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isOccupied() {
            return occupied;
        }
    }

}
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class AdminMainPanel extends Application {
    private BorderPane root;
    private List<ParkingRecord> parkingRecords = new ArrayList<>();
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("管理员界面 - 停车管理系统");
        root = new BorderPane();

        // 创建菜单和其他UI组件
        setupUI(primaryStage);
        showParkingStatus();
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    private void setupUI(Stage primaryStage) {
        // 菜单项
        MenuBar menuBar = new MenuBar();
        Menu viewMenu = new Menu("视图");
        MenuItem viewParkingStatus = new MenuItem("查看车位情况");
        MenuItem viewAllRecords = new MenuItem("查看所有停车记录");
        viewMenu.getItems().addAll(viewParkingStatus, viewAllRecords);

        Menu adminMenu = new Menu("管理");
        MenuItem manageUsers = new MenuItem("管理用户信息");
        MenuItem manageRates = new MenuItem("修改计费单价");
        adminMenu.getItems().addAll(manageUsers, manageRates);

        Menu accountMenu = new Menu("账户");
//        MenuItem myInfo = new MenuItem("个人信息");
        MenuItem logoutMenuItem = new MenuItem("登出");
        logoutMenuItem.setOnAction(event -> logoutAction());

//        accountMenu.getItems().addAll(myInfo,logoutMenuItem);
        accountMenu.getItems().addAll(logoutMenuItem);
        menuBar.getMenus().addAll(viewMenu, adminMenu,accountMenu);
        root.setTop(menuBar);

        // 菜单项事件处理
        viewParkingStatus.setOnAction(e -> showParkingStatus());
        viewAllRecords.setOnAction(e -> showAllParkingRecords());
        manageUsers.setOnAction(e -> manageUserInformation());
        manageRates.setOnAction(e -> changeParkingRates());

    }

    private void logoutAction() {
        // 关闭当前界面
        Stage stage = (Stage) root.getScene().getWindow();
        stage.close();

        // 打开登录界面
        Platform.runLater(() -> {
            try {
                new LoginFrame().start(new Stage()); // 假设LoginFrame是您的登录界面类
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    /* 显示所有停车记录 */
    public void showAllParkingRecords() {
        System.out.println("显示停车记录");
        // completed_parkings.csv
        CSVManager csvManager = new CSVManager("completed_parkings.csv");
        List<ParkingRecord> records = csvManager.loadParkingRecords("");
        System.out.println(records.size());
        TableView<ParkingRecord> table = new TableView<>();
        ObservableList<ParkingRecord> data = FXCollections.observableArrayList(records);

        // 定义列
        TableColumn<ParkingRecord, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<ParkingRecord, String> startCol = new TableColumn<>("开始时间");
        startCol.setCellValueFactory(new PropertyValueFactory<>("startTime"));

        TableColumn<ParkingRecord, String> endCol = new TableColumn<>("结束时间");
        endCol.setCellValueFactory(new PropertyValueFactory<>("endTime"));

        TableColumn<ParkingRecord, Long> durationCol = new TableColumn<>("停车时长(分钟)");
        durationCol.setCellValueFactory(new PropertyValueFactory<>("durationInMinutes"));

        TableColumn<ParkingRecord, Double> feeCol = new TableColumn<>("停车费用");
        feeCol.setCellValueFactory(new PropertyValueFactory<>("fee"));
//        feeCol.prefWidthProperty().bind(table.widthProperty().multiply(0.2));

        table.getColumns().addAll(usernameCol, startCol, endCol, durationCol, feeCol);
        table.setItems(data);

        // 显示表格
        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox,800,400);
        Stage stage = new Stage();
        stage.setScene(scene);
        stage.setTitle("停车记录");
        stage.show();

    }

    private void manageUserInformation() {
        CSVManager csvManager = new CSVManager("users.csv");
        List<User> users = null;
        try {
            users = csvManager.loadUsers();
        } catch (IOException e) {
            e.printStackTrace();
        }

        TableView<User> table = new TableView<>();
        ObservableList<User> data = FXCollections.observableArrayList(users);

        // 定义列
        TableColumn<User, String> roleCol = new TableColumn<>("角色");
        roleCol.setCellValueFactory(new PropertyValueFactory<>("role"));

        TableColumn<User, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<User, String> passwordCol = new TableColumn<>("密码");
        passwordCol.setCellValueFactory(new PropertyValueFactory<>("password"));

        TableColumn<User, String> statusCol = new TableColumn<>("账号状态");
        statusCol.setCellValueFactory(new PropertyValueFactory<>("status"));

        table.getColumns().addAll(roleCol, usernameCol, passwordCol, statusCol);
        table.setItems(data);
        TableColumn<User, Void> actionCol = new TableColumn<>("操作");

        actionCol.setCellFactory(col -> new TableCell<User, Void>() {
            private final Button activateButton = new Button("激活/禁用");
            private final Button editButton = new Button("修改");
            private final Button deleteButton = new Button("删除");

            {
                // 激活或停用账号
                activateButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    toggleUserStatus(user);
                });

                // 修改用户信息
                editButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    editUserInfo(user);
                });

                // 删除账号
                deleteButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    deleteUser(user);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(activateButton, editButton, deleteButton);
                    hbox.setSpacing(10);
                    setGraphic(hbox);
                }
            }
        });
        table.getColumns().add(actionCol);

        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox, 800, 600);
        Stage stage = new Stage();
        stage.setTitle("管理用户信息");
        stage.setScene(scene);
        stage.show();

    }

    private void toggleUserStatus(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否激活/停用 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.toggleUserStatus(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 状态修改成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户状态修改失败: " + e.getMessage());
                }
            }
        });
    }

    private void editUserInfo(User user) {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改用户信息");
        dialog.setHeaderText("修改用户 " + user.getUsername() + " 的信息");
        dialog.setContentText("请输入新密码:");

        // 获取用户输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newPassword -> {
            try {
                CSVManager csvManager = new CSVManager("users.csv");
                csvManager.updateUser(user.getUsername(), newPassword);
                showAlert("成功", "User " + user.getUsername() + " 信息修改成功.");
                manageUserInformation();
            } catch (IOException e) {
                showAlert("错误", "用户信息修改失败: " + e.getMessage());
            }
        });
    }

    private void deleteUser(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否删除 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.deleteUser(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 删除成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户删除失败: " + e.getMessage());
                }
            }
        });
    }

    /* 修改计费单价 */
    private void changeParkingRates() {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改停车费率");
        dialog.setHeaderText("修改停车费率");
        dialog.setContentText("请输入新的停车费率（每分钟）:");

        // 处理用户的输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newRate -> {
            try {
                double rate = Double.parseDouble(newRate);
                FeeManager feeManager = new FeeManager("fee_info.txt"); // 指定费率文件的路径
                feeManager.saveFeePerMinute(rate); // 更新费率
                showAlert("更新成功", "停车费率已更新为 " + rate + " 元/分钟。");
            } catch (NumberFormatException e) {
                showAlert("错误", "请输入有效的数字。");
            }
        });
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }


    public static void main(String[] args) {
        launch(args);
    }

    private GridPane createParkingGrid() {
        //        active_parkings.csv
        CSVManager activeParkingManager = new CSVManager("active_parkings.csv");
        parkingRecords = activeParkingManager.loadActiveParkingRecords("");  // Load records; ensure this returns all relevant records
        GridPane parkingGrid = new GridPane();
        parkingGrid.setPadding(new Insets(10));
        parkingGrid.setHgap(10);
        parkingGrid.setVgap(10);
        System.out.println("Loaded records:");
        for(ParkingRecord record : parkingRecords) {
            System.out.println(record);
        }
        for (int row = 0; row < 10; row++) {
            for (int col = 0; col < 5; col++) {
                int spotIndex = row * 5 + col;
                Button parkingSpot = new Button("空闲");
                parkingSpot.setPrefSize(100, 50);

                // Set parking spot state based on loaded records
                int finalCol = col;
                int finalRow = row;
                parkingRecords.stream()
                        .filter(record -> record.getXPosition() == finalCol && record.getYPosition() == finalRow)
                        .findFirst()
                        .ifPresent(record -> {
                            parkingSpot.setText("占用");
                            parkingSpot.setStyle("-fx-background-color: red; -fx-text-fill: white;");
                            parkingSpot.setDisable(true);  // Optional: Disable button if spot is occupied
                        });

                parkingGrid.add(parkingSpot, col, row);
            }
        }
        return parkingGrid;
    }

    private void showParkingStatus() {
        GridPane parkingGrid = createParkingGrid(); // 创建停车场网格布局
        root.setCenter(parkingGrid); // 将停车场视图设置为界面的中心内容
    }


    private List<ParkingSpot> getParkingStatus() {
        String filePath = "active_parkings.csv";  // Path to the CSV file with active parking data
        List<ParkingSpot> spots = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                try {
                    String[] parts = line.split(",");
                    if (parts.length >= 7) {  // Ensure there are enough parts
                        int xPosition = Integer.parseInt(parts[5]);  // Parse X position
                        int yPosition = Integer.parseInt(parts[6]);  // Parse Y position
                        if (xPosition < 10 && yPosition < 5) {  // Validate positions against grid size
                            boolean occupied = true;  // Since the record exists, the spot is occupied
                            spots.add(new ParkingSpot(xPosition, yPosition, occupied));

                        }
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Invalid record format: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return spots;
    }



    class ParkingSpot {
        private int x;
        private int y;
        private boolean occupied;

        public ParkingSpot(int x, int y, boolean occupied) {
            this.x = x;
            this.y = y;
            this.occupied = occupied;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isOccupied() {
            return occupied;
        }
    }

}
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class AdminMainPanel extends Application {
    private BorderPane root;
    private List<ParkingRecord> parkingRecords = new ArrayList<>();
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("管理员界面 - 停车管理系统");
        root = new BorderPane();

        // 创建菜单和其他UI组件
        setupUI(primaryStage);
        showParkingStatus();
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    private void setupUI(Stage primaryStage) {
        // 菜单项
        MenuBar menuBar = new MenuBar();
        Menu viewMenu = new Menu("视图");
        MenuItem viewParkingStatus = new MenuItem("查看车位情况");
        MenuItem viewAllRecords = new MenuItem("查看所有停车记录");
        viewMenu.getItems().addAll(viewParkingStatus, viewAllRecords);

        Menu adminMenu = new Menu("管理");
        MenuItem manageUsers = new MenuItem("管理用户信息");
        MenuItem manageRates = new MenuItem("修改计费单价");
        adminMenu.getItems().addAll(manageUsers, manageRates);

        Menu accountMenu = new Menu("账户");
//        MenuItem myInfo = new MenuItem("个人信息");
        MenuItem logoutMenuItem = new MenuItem("登出");
        logoutMenuItem.setOnAction(event -> logoutAction());

//        accountMenu.getItems().addAll(myInfo,logoutMenuItem);
        accountMenu.getItems().addAll(logoutMenuItem);
        menuBar.getMenus().addAll(viewMenu, adminMenu,accountMenu);
        root.setTop(menuBar);

        // 菜单项事件处理
        viewParkingStatus.setOnAction(e -> showParkingStatus());
        viewAllRecords.setOnAction(e -> showAllParkingRecords());
        manageUsers.setOnAction(e -> manageUserInformation());
        manageRates.setOnAction(e -> changeParkingRates());

    }

    private void logoutAction() {
        // 关闭当前界面
        Stage stage = (Stage) root.getScene().getWindow();
        stage.close();

        // 打开登录界面
        Platform.runLater(() -> {
            try {
                new LoginFrame().start(new Stage()); // 假设LoginFrame是您的登录界面类
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    /* 显示所有停车记录 */
    public void showAllParkingRecords() {
        System.out.println("显示停车记录");
        // completed_parkings.csv
        CSVManager csvManager = new CSVManager("completed_parkings.csv");
        List<ParkingRecord> records = csvManager.loadParkingRecords("");
        System.out.println(records.size());
        TableView<ParkingRecord> table = new TableView<>();
        ObservableList<ParkingRecord> data = FXCollections.observableArrayList(records);

        // 定义列
        TableColumn<ParkingRecord, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<ParkingRecord, String> startCol = new TableColumn<>("开始时间");
        startCol.setCellValueFactory(new PropertyValueFactory<>("startTime"));

        TableColumn<ParkingRecord, String> endCol = new TableColumn<>("结束时间");
        endCol.setCellValueFactory(new PropertyValueFactory<>("endTime"));

        TableColumn<ParkingRecord, Long> durationCol = new TableColumn<>("停车时长(分钟)");
        durationCol.setCellValueFactory(new PropertyValueFactory<>("durationInMinutes"));

        TableColumn<ParkingRecord, Double> feeCol = new TableColumn<>("停车费用");
        feeCol.setCellValueFactory(new PropertyValueFactory<>("fee"));
//        feeCol.prefWidthProperty().bind(table.widthProperty().multiply(0.2));

        table.getColumns().addAll(usernameCol, startCol, endCol, durationCol, feeCol);
        table.setItems(data);

        // 显示表格
        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox,800,400);
        Stage stage = new Stage();
        stage.setScene(scene);
        stage.setTitle("停车记录");
        stage.show();

    }

    private void manageUserInformation() {
        CSVManager csvManager = new CSVManager("users.csv");
        List<User> users = null;
        try {
            users = csvManager.loadUsers();
        } catch (IOException e) {
            e.printStackTrace();
        }

        TableView<User> table = new TableView<>();
        ObservableList<User> data = FXCollections.observableArrayList(users);

        // 定义列
        TableColumn<User, String> roleCol = new TableColumn<>("角色");
        roleCol.setCellValueFactory(new PropertyValueFactory<>("role"));

        TableColumn<User, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<User, String> passwordCol = new TableColumn<>("密码");
        passwordCol.setCellValueFactory(new PropertyValueFactory<>("password"));

        TableColumn<User, String> statusCol = new TableColumn<>("账号状态");
        statusCol.setCellValueFactory(new PropertyValueFactory<>("status"));

        table.getColumns().addAll(roleCol, usernameCol, passwordCol, statusCol);
        table.setItems(data);
        TableColumn<User, Void> actionCol = new TableColumn<>("操作");

        actionCol.setCellFactory(col -> new TableCell<User, Void>() {
            private final Button activateButton = new Button("激活/禁用");
            private final Button editButton = new Button("修改");
            private final Button deleteButton = new Button("删除");

            {
                // 激活或停用账号
                activateButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    toggleUserStatus(user);
                });

                // 修改用户信息
                editButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    editUserInfo(user);
                });

                // 删除账号
                deleteButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    deleteUser(user);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(activateButton, editButton, deleteButton);
                    hbox.setSpacing(10);
                    setGraphic(hbox);
                }
            }
        });
        table.getColumns().add(actionCol);

        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox, 800, 600);
        Stage stage = new Stage();
        stage.setTitle("管理用户信息");
        stage.setScene(scene);
        stage.show();

    }

    private void toggleUserStatus(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否激活/停用 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.toggleUserStatus(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 状态修改成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户状态修改失败: " + e.getMessage());
                }
            }
        });
    }

    private void editUserInfo(User user) {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改用户信息");
        dialog.setHeaderText("修改用户 " + user.getUsername() + " 的信息");
        dialog.setContentText("请输入新密码:");

        // 获取用户输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newPassword -> {
            try {
                CSVManager csvManager = new CSVManager("users.csv");
                csvManager.updateUser(user.getUsername(), newPassword);
                showAlert("成功", "User " + user.getUsername() + " 信息修改成功.");
                manageUserInformation();
            } catch (IOException e) {
                showAlert("错误", "用户信息修改失败: " + e.getMessage());
            }
        });
    }

    private void deleteUser(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否删除 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.deleteUser(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 删除成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户删除失败: " + e.getMessage());
                }
            }
        });
    }

    /* 修改计费单价 */
    private void changeParkingRates() {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改停车费率");
        dialog.setHeaderText("修改停车费率");
        dialog.setContentText("请输入新的停车费率（每分钟）:");

        // 处理用户的输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newRate -> {
            try {
                double rate = Double.parseDouble(newRate);
                FeeManager feeManager = new FeeManager("fee_info.txt"); // 指定费率文件的路径
                feeManager.saveFeePerMinute(rate); // 更新费率
                showAlert("更新成功", "停车费率已更新为 " + rate + " 元/分钟。");
            } catch (NumberFormatException e) {
                showAlert("错误", "请输入有效的数字。");
            }
        });
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }


    public static void main(String[] args) {
        launch(args);
    }

    private GridPane createParkingGrid() {
        //        active_parkings.csv
        CSVManager activeParkingManager = new CSVManager("active_parkings.csv");
        parkingRecords = activeParkingManager.loadActiveParkingRecords("");  // Load records; ensure this returns all relevant records
        GridPane parkingGrid = new GridPane();
        parkingGrid.setPadding(new Insets(10));
        parkingGrid.setHgap(10);
        parkingGrid.setVgap(10);
        System.out.println("Loaded records:");
        for(ParkingRecord record : parkingRecords) {
            System.out.println(record);
        }
        for (int row = 0; row < 10; row++) {
            for (int col = 0; col < 5; col++) {
                int spotIndex = row * 5 + col;
                Button parkingSpot = new Button("空闲");
                parkingSpot.setPrefSize(100, 50);

                // Set parking spot state based on loaded records
                int finalCol = col;
                int finalRow = row;
                parkingRecords.stream()
                        .filter(record -> record.getXPosition() == finalCol && record.getYPosition() == finalRow)
                        .findFirst()
                        .ifPresent(record -> {
                            parkingSpot.setText("占用");
                            parkingSpot.setStyle("-fx-background-color: red; -fx-text-fill: white;");
                            parkingSpot.setDisable(true);  // Optional: Disable button if spot is occupied
                        });

                parkingGrid.add(parkingSpot, col, row);
            }
        }
        return parkingGrid;
    }

    private void showParkingStatus() {
        GridPane parkingGrid = createParkingGrid(); // 创建停车场网格布局
        root.setCenter(parkingGrid); // 将停车场视图设置为界面的中心内容
    }


    private List<ParkingSpot> getParkingStatus() {
        String filePath = "active_parkings.csv";  // Path to the CSV file with active parking data
        List<ParkingSpot> spots = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                try {
                    String[] parts = line.split(",");
                    if (parts.length >= 7) {  // Ensure there are enough parts
                        int xPosition = Integer.parseInt(parts[5]);  // Parse X position
                        int yPosition = Integer.parseInt(parts[6]);  // Parse Y position
                        if (xPosition < 10 && yPosition < 5) {  // Validate positions against grid size
                            boolean occupied = true;  // Since the record exists, the spot is occupied
                            spots.add(new ParkingSpot(xPosition, yPosition, occupied));

                        }
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Invalid record format: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return spots;
    }



    class ParkingSpot {
        private int x;
        private int y;
        private boolean occupied;

        public ParkingSpot(int x, int y, boolean occupied) {
            this.x = x;
            this.y = y;
            this.occupied = occupied;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isOccupied() {
            return occupied;
        }
    }

}
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class AdminMainPanel extends Application {
    private BorderPane root;
    private List<ParkingRecord> parkingRecords = new ArrayList<>();
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("管理员界面 - 停车管理系统");
        root = new BorderPane();

        // 创建菜单和其他UI组件
        setupUI(primaryStage);
        showParkingStatus();
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    private void setupUI(Stage primaryStage) {
        // 菜单项
        MenuBar menuBar = new MenuBar();
        Menu viewMenu = new Menu("视图");
        MenuItem viewParkingStatus = new MenuItem("查看车位情况");
        MenuItem viewAllRecords = new MenuItem("查看所有停车记录");
        viewMenu.getItems().addAll(viewParkingStatus, viewAllRecords);

        Menu adminMenu = new Menu("管理");
        MenuItem manageUsers = new MenuItem("管理用户信息");
        MenuItem manageRates = new MenuItem("修改计费单价");
        adminMenu.getItems().addAll(manageUsers, manageRates);

        Menu accountMenu = new Menu("账户");
//        MenuItem myInfo = new MenuItem("个人信息");
        MenuItem logoutMenuItem = new MenuItem("登出");
        logoutMenuItem.setOnAction(event -> logoutAction());

//        accountMenu.getItems().addAll(myInfo,logoutMenuItem);
        accountMenu.getItems().addAll(logoutMenuItem);
        menuBar.getMenus().addAll(viewMenu, adminMenu,accountMenu);
        root.setTop(menuBar);

        // 菜单项事件处理
        viewParkingStatus.setOnAction(e -> showParkingStatus());
        viewAllRecords.setOnAction(e -> showAllParkingRecords());
        manageUsers.setOnAction(e -> manageUserInformation());
        manageRates.setOnAction(e -> changeParkingRates());

    }

    private void logoutAction() {
        // 关闭当前界面
        Stage stage = (Stage) root.getScene().getWindow();
        stage.close();

        // 打开登录界面
        Platform.runLater(() -> {
            try {
                new LoginFrame().start(new Stage()); // 假设LoginFrame是您的登录界面类
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    /* 显示所有停车记录 */
    public void showAllParkingRecords() {
        System.out.println("显示停车记录");
        // completed_parkings.csv
        CSVManager csvManager = new CSVManager("completed_parkings.csv");
        List<ParkingRecord> records = csvManager.loadParkingRecords("");
        System.out.println(records.size());
        TableView<ParkingRecord> table = new TableView<>();
        ObservableList<ParkingRecord> data = FXCollections.observableArrayList(records);

        // 定义列
        TableColumn<ParkingRecord, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<ParkingRecord, String> startCol = new TableColumn<>("开始时间");
        startCol.setCellValueFactory(new PropertyValueFactory<>("startTime"));

        TableColumn<ParkingRecord, String> endCol = new TableColumn<>("结束时间");
        endCol.setCellValueFactory(new PropertyValueFactory<>("endTime"));

        TableColumn<ParkingRecord, Long> durationCol = new TableColumn<>("停车时长(分钟)");
        durationCol.setCellValueFactory(new PropertyValueFactory<>("durationInMinutes"));

        TableColumn<ParkingRecord, Double> feeCol = new TableColumn<>("停车费用");
        feeCol.setCellValueFactory(new PropertyValueFactory<>("fee"));
//        feeCol.prefWidthProperty().bind(table.widthProperty().multiply(0.2));

        table.getColumns().addAll(usernameCol, startCol, endCol, durationCol, feeCol);
        table.setItems(data);

        // 显示表格
        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox,800,400);
        Stage stage = new Stage();
        stage.setScene(scene);
        stage.setTitle("停车记录");
        stage.show();

    }

    private void manageUserInformation() {
        CSVManager csvManager = new CSVManager("users.csv");
        List<User> users = null;
        try {
            users = csvManager.loadUsers();
        } catch (IOException e) {
            e.printStackTrace();
        }

        TableView<User> table = new TableView<>();
        ObservableList<User> data = FXCollections.observableArrayList(users);

        // 定义列
        TableColumn<User, String> roleCol = new TableColumn<>("角色");
        roleCol.setCellValueFactory(new PropertyValueFactory<>("role"));

        TableColumn<User, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<User, String> passwordCol = new TableColumn<>("密码");
        passwordCol.setCellValueFactory(new PropertyValueFactory<>("password"));

        TableColumn<User, String> statusCol = new TableColumn<>("账号状态");
        statusCol.setCellValueFactory(new PropertyValueFactory<>("status"));

        table.getColumns().addAll(roleCol, usernameCol, passwordCol, statusCol);
        table.setItems(data);
        TableColumn<User, Void> actionCol = new TableColumn<>("操作");

        actionCol.setCellFactory(col -> new TableCell<User, Void>() {
            private final Button activateButton = new Button("激活/禁用");
            private final Button editButton = new Button("修改");
            private final Button deleteButton = new Button("删除");

            {
                // 激活或停用账号
                activateButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    toggleUserStatus(user);
                });

                // 修改用户信息
                editButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    editUserInfo(user);
                });

                // 删除账号
                deleteButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    deleteUser(user);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(activateButton, editButton, deleteButton);
                    hbox.setSpacing(10);
                    setGraphic(hbox);
                }
            }
        });
        table.getColumns().add(actionCol);

        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox, 800, 600);
        Stage stage = new Stage();
        stage.setTitle("管理用户信息");
        stage.setScene(scene);
        stage.show();

    }

    private void toggleUserStatus(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否激活/停用 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.toggleUserStatus(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 状态修改成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户状态修改失败: " + e.getMessage());
                }
            }
        });
    }

    private void editUserInfo(User user) {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改用户信息");
        dialog.setHeaderText("修改用户 " + user.getUsername() + " 的信息");
        dialog.setContentText("请输入新密码:");

        // 获取用户输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newPassword -> {
            try {
                CSVManager csvManager = new CSVManager("users.csv");
                csvManager.updateUser(user.getUsername(), newPassword);
                showAlert("成功", "User " + user.getUsername() + " 信息修改成功.");
                manageUserInformation();
            } catch (IOException e) {
                showAlert("错误", "用户信息修改失败: " + e.getMessage());
            }
        });
    }

    private void deleteUser(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否删除 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.deleteUser(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 删除成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户删除失败: " + e.getMessage());
                }
            }
        });
    }

    /* 修改计费单价 */
    private void changeParkingRates() {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改停车费率");
        dialog.setHeaderText("修改停车费率");
        dialog.setContentText("请输入新的停车费率（每分钟）:");

        // 处理用户的输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newRate -> {
            try {
                double rate = Double.parseDouble(newRate);
                FeeManager feeManager = new FeeManager("fee_info.txt"); // 指定费率文件的路径
                feeManager.saveFeePerMinute(rate); // 更新费率
                showAlert("更新成功", "停车费率已更新为 " + rate + " 元/分钟。");
            } catch (NumberFormatException e) {
                showAlert("错误", "请输入有效的数字。");
            }
        });
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }


    public static void main(String[] args) {
        launch(args);
    }

    private GridPane createParkingGrid() {
        //        active_parkings.csv
        CSVManager activeParkingManager = new CSVManager("active_parkings.csv");
        parkingRecords = activeParkingManager.loadActiveParkingRecords("");  // Load records; ensure this returns all relevant records
        GridPane parkingGrid = new GridPane();
        parkingGrid.setPadding(new Insets(10));
        parkingGrid.setHgap(10);
        parkingGrid.setVgap(10);
        System.out.println("Loaded records:");
        for(ParkingRecord record : parkingRecords) {
            System.out.println(record);
        }
        for (int row = 0; row < 10; row++) {
            for (int col = 0; col < 5; col++) {
                int spotIndex = row * 5 + col;
                Button parkingSpot = new Button("空闲");
                parkingSpot.setPrefSize(100, 50);

                // Set parking spot state based on loaded records
                int finalCol = col;
                int finalRow = row;
                parkingRecords.stream()
                        .filter(record -> record.getXPosition() == finalCol && record.getYPosition() == finalRow)
                        .findFirst()
                        .ifPresent(record -> {
                            parkingSpot.setText("占用");
                            parkingSpot.setStyle("-fx-background-color: red; -fx-text-fill: white;");
                            parkingSpot.setDisable(true);  // Optional: Disable button if spot is occupied
                        });

                parkingGrid.add(parkingSpot, col, row);
            }
        }
        return parkingGrid;
    }

    private void showParkingStatus() {
        GridPane parkingGrid = createParkingGrid(); // 创建停车场网格布局
        root.setCenter(parkingGrid); // 将停车场视图设置为界面的中心内容
    }


    private List<ParkingSpot> getParkingStatus() {
        String filePath = "active_parkings.csv";  // Path to the CSV file with active parking data
        List<ParkingSpot> spots = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                try {
                    String[] parts = line.split(",");
                    if (parts.length >= 7) {  // Ensure there are enough parts
                        int xPosition = Integer.parseInt(parts[5]);  // Parse X position
                        int yPosition = Integer.parseInt(parts[6]);  // Parse Y position
                        if (xPosition < 10 && yPosition < 5) {  // Validate positions against grid size
                            boolean occupied = true;  // Since the record exists, the spot is occupied
                            spots.add(new ParkingSpot(xPosition, yPosition, occupied));

                        }
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Invalid record format: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return spots;
    }



    class ParkingSpot {
        private int x;
        private int y;
        private boolean occupied;

        public ParkingSpot(int x, int y, boolean occupied) {
            this.x = x;
            this.y = y;
            this.occupied = occupied;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isOccupied() {
            return occupied;
        }
    }

}
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class AdminMainPanel extends Application {
    private BorderPane root;
    private List<ParkingRecord> parkingRecords = new ArrayList<>();
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("管理员界面 - 停车管理系统");
        root = new BorderPane();

        // 创建菜单和其他UI组件
        setupUI(primaryStage);
        showParkingStatus();
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    private void setupUI(Stage primaryStage) {
        // 菜单项
        MenuBar menuBar = new MenuBar();
        Menu viewMenu = new Menu("视图");
        MenuItem viewParkingStatus = new MenuItem("查看车位情况");
        MenuItem viewAllRecords = new MenuItem("查看所有停车记录");
        viewMenu.getItems().addAll(viewParkingStatus, viewAllRecords);

        Menu adminMenu = new Menu("管理");
        MenuItem manageUsers = new MenuItem("管理用户信息");
        MenuItem manageRates = new MenuItem("修改计费单价");
        adminMenu.getItems().addAll(manageUsers, manageRates);

        Menu accountMenu = new Menu("账户");
//        MenuItem myInfo = new MenuItem("个人信息");
        MenuItem logoutMenuItem = new MenuItem("登出");
        logoutMenuItem.setOnAction(event -> logoutAction());

//        accountMenu.getItems().addAll(myInfo,logoutMenuItem);
        accountMenu.getItems().addAll(logoutMenuItem);
        menuBar.getMenus().addAll(viewMenu, adminMenu,accountMenu);
        root.setTop(menuBar);

        // 菜单项事件处理
        viewParkingStatus.setOnAction(e -> showParkingStatus());
        viewAllRecords.setOnAction(e -> showAllParkingRecords());
        manageUsers.setOnAction(e -> manageUserInformation());
        manageRates.setOnAction(e -> changeParkingRates());

    }

    private void logoutAction() {
        // 关闭当前界面
        Stage stage = (Stage) root.getScene().getWindow();
        stage.close();

        // 打开登录界面
        Platform.runLater(() -> {
            try {
                new LoginFrame().start(new Stage()); // 假设LoginFrame是您的登录界面类
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    /* 显示所有停车记录 */
    public void showAllParkingRecords() {
        System.out.println("显示停车记录");
        // completed_parkings.csv
        CSVManager csvManager = new CSVManager("completed_parkings.csv");
        List<ParkingRecord> records = csvManager.loadParkingRecords("");
        System.out.println(records.size());
        TableView<ParkingRecord> table = new TableView<>();
        ObservableList<ParkingRecord> data = FXCollections.observableArrayList(records);

        // 定义列
        TableColumn<ParkingRecord, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<ParkingRecord, String> startCol = new TableColumn<>("开始时间");
        startCol.setCellValueFactory(new PropertyValueFactory<>("startTime"));

        TableColumn<ParkingRecord, String> endCol = new TableColumn<>("结束时间");
        endCol.setCellValueFactory(new PropertyValueFactory<>("endTime"));

        TableColumn<ParkingRecord, Long> durationCol = new TableColumn<>("停车时长(分钟)");
        durationCol.setCellValueFactory(new PropertyValueFactory<>("durationInMinutes"));

        TableColumn<ParkingRecord, Double> feeCol = new TableColumn<>("停车费用");
        feeCol.setCellValueFactory(new PropertyValueFactory<>("fee"));
//        feeCol.prefWidthProperty().bind(table.widthProperty().multiply(0.2));

        table.getColumns().addAll(usernameCol, startCol, endCol, durationCol, feeCol);
        table.setItems(data);

        // 显示表格
        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox,800,400);
        Stage stage = new Stage();
        stage.setScene(scene);
        stage.setTitle("停车记录");
        stage.show();

    }

    private void manageUserInformation() {
        CSVManager csvManager = new CSVManager("users.csv");
        List<User> users = null;
        try {
            users = csvManager.loadUsers();
        } catch (IOException e) {
            e.printStackTrace();
        }

        TableView<User> table = new TableView<>();
        ObservableList<User> data = FXCollections.observableArrayList(users);

        // 定义列
        TableColumn<User, String> roleCol = new TableColumn<>("角色");
        roleCol.setCellValueFactory(new PropertyValueFactory<>("role"));

        TableColumn<User, String> usernameCol = new TableColumn<>("用户名");
        usernameCol.setCellValueFactory(new PropertyValueFactory<>("username"));

        TableColumn<User, String> passwordCol = new TableColumn<>("密码");
        passwordCol.setCellValueFactory(new PropertyValueFactory<>("password"));

        TableColumn<User, String> statusCol = new TableColumn<>("账号状态");
        statusCol.setCellValueFactory(new PropertyValueFactory<>("status"));

        table.getColumns().addAll(roleCol, usernameCol, passwordCol, statusCol);
        table.setItems(data);
        TableColumn<User, Void> actionCol = new TableColumn<>("操作");

        actionCol.setCellFactory(col -> new TableCell<User, Void>() {
            private final Button activateButton = new Button("激活/禁用");
            private final Button editButton = new Button("修改");
            private final Button deleteButton = new Button("删除");

            {
                // 激活或停用账号
                activateButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    toggleUserStatus(user);
                });

                // 修改用户信息
                editButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    editUserInfo(user);
                });

                // 删除账号
                deleteButton.setOnAction(event -> {
                    User user = getTableView().getItems().get(getIndex());
                    deleteUser(user);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(activateButton, editButton, deleteButton);
                    hbox.setSpacing(10);
                    setGraphic(hbox);
                }
            }
        });
        table.getColumns().add(actionCol);

        VBox vbox = new VBox(table);
        Scene scene = new Scene(vbox, 800, 600);
        Stage stage = new Stage();
        stage.setTitle("管理用户信息");
        stage.setScene(scene);
        stage.show();

    }

    private void toggleUserStatus(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否激活/停用 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.toggleUserStatus(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 状态修改成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户状态修改失败: " + e.getMessage());
                }
            }
        });
    }

    private void editUserInfo(User user) {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改用户信息");
        dialog.setHeaderText("修改用户 " + user.getUsername() + " 的信息");
        dialog.setContentText("请输入新密码:");

        // 获取用户输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newPassword -> {
            try {
                CSVManager csvManager = new CSVManager("users.csv");
                csvManager.updateUser(user.getUsername(), newPassword);
                showAlert("成功", "User " + user.getUsername() + " 信息修改成功.");
                manageUserInformation();
            } catch (IOException e) {
                showAlert("错误", "用户信息修改失败: " + e.getMessage());
            }
        });
    }

    private void deleteUser(User user) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION, "是否删除 " + user.getUsername() + "?", ButtonType.YES, ButtonType.NO);
        confirmAlert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    CSVManager csvManager = new CSVManager("users.csv");
                    csvManager.deleteUser(user.getUsername());
                    showAlert("成功", "User " + user.getUsername() + " 删除成功.");
                    manageUserInformation();
                } catch (IOException e) {
                    showAlert("错误", "用户删除失败: " + e.getMessage());
                }
            }
        });
    }

    /* 修改计费单价 */
    private void changeParkingRates() {
        // 创建一个对话框
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("修改停车费率");
        dialog.setHeaderText("修改停车费率");
        dialog.setContentText("请输入新的停车费率（每分钟）:");

        // 处理用户的输入
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newRate -> {
            try {
                double rate = Double.parseDouble(newRate);
                FeeManager feeManager = new FeeManager("fee_info.txt"); // 指定费率文件的路径
                feeManager.saveFeePerMinute(rate); // 更新费率
                showAlert("更新成功", "停车费率已更新为 " + rate + " 元/分钟。");
            } catch (NumberFormatException e) {
                showAlert("错误", "请输入有效的数字。");
            }
        });
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }


    public static void main(String[] args) {
        launch(args);
    }

    private GridPane createParkingGrid() {
        //        active_parkings.csv
        CSVManager activeParkingManager = new CSVManager("active_parkings.csv");
        parkingRecords = activeParkingManager.loadActiveParkingRecords("");  // Load records; ensure this returns all relevant records
        GridPane parkingGrid = new GridPane();
        parkingGrid.setPadding(new Insets(10));
        parkingGrid.setHgap(10);
        parkingGrid.setVgap(10);
        System.out.println("Loaded records:");
        for(ParkingRecord record : parkingRecords) {
            System.out.println(record);
        }
        for (int row = 0; row < 10; row++) {
            for (int col = 0; col < 5; col++) {
                int spotIndex = row * 5 + col;
                Button parkingSpot = new Button("空闲");
                parkingSpot.setPrefSize(100, 50);

                // Set parking spot state based on loaded records
                int finalCol = col;
                int finalRow = row;
                parkingRecords.stream()
                        .filter(record -> record.getXPosition() == finalCol && record.getYPosition() == finalRow)
                        .findFirst()
                        .ifPresent(record -> {
                            parkingSpot.setText("占用");
                            parkingSpot.setStyle("-fx-background-color: red; -fx-text-fill: white;");
                            parkingSpot.setDisable(true);  // Optional: Disable button if spot is occupied
                        });

                parkingGrid.add(parkingSpot, col, row);
            }
        }
        return parkingGrid;
    }

    private void showParkingStatus() {
        GridPane parkingGrid = createParkingGrid(); // 创建停车场网格布局
        root.setCenter(parkingGrid); // 将停车场视图设置为界面的中心内容
    }


    private List<ParkingSpot> getParkingStatus() {
        String filePath = "active_parkings.csv";  // Path to the CSV file with active parking data
        List<ParkingSpot> spots = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                try {
                    String[] parts = line.split(",");
                    if (parts.length >= 7) {  // Ensure there are enough parts
                        int xPosition = Integer.parseInt(parts[5]);  // Parse X position
                        int yPosition = Integer.parseInt(parts[6]);  // Parse Y position
                        if (xPosition < 10 && yPosition < 5) {  // Validate positions against grid size
                            boolean occupied = true;  // Since the record exists, the spot is occupied
                            spots.add(new ParkingSpot(xPosition, yPosition, occupied));

                        }
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Invalid record format: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return spots;
    }



    class ParkingSpot {
        private int x;
        private int y;
        private boolean occupied;

        public ParkingSpot(int x, int y, boolean occupied) {
            this.x = x;
            this.y = y;
            this.occupied = occupied;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isOccupied() {
            return occupied;
        }
    }

}
